stages:
  - build
  - test
  - release
#  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_PROJECT_NAME:latest

#build-linux:
#  image: ubuntu:22.04
#  stage: build
#  before_script:
#    - apt update -qy
#    - apt upgrade -qy
#    - apt install -qy --no-install-recommends g++ make pip perl libmysqlclient-dev
#    - pip install conan cmake
#    - ln -s /usr/local/bin/cmake /usr/bin/cmake
#  script:
#    - conan profile detect --force
#    - conan install . --output-folder=build --build=missing
#    - cd build
#    - cmake .. -DCMAKE_CXX_FLAGS=-isystem\ /usr/include/mysql -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
#    - cmake --build . -j`nproc`
#  artifacts:
#    paths:
#      - build/bin

build:
  image: docker:23.0.5-git
  stage: build
  services:
    - docker:23.0.5-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DOCKER_BUILDKIT=1
    - docker build --pull --target export -t $CONTAINER_TEST_IMAGE . --output bin
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
  artifacts:
    paths:
      - bin
  
test:
  image: ubuntu:22.04
  stage: test
  before_script:
    - apt update -qy
    - apt upgrade -qy
    - apt install -qy --no-install-recommends mysql-server
    - service mysql restart
  script:
    - mysql -e "CREATE USER 'admin'@'127.0.0.1' IDENTIFIED BY '123456';"
    - mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'admin'@'127.0.0.1';"
    - mysql -e "CREATE DATABASE RealworldTest;"
    - mysql RealworldTest < sql/realworld.sql
    - export REALWORLD_TEST_DB_HOST=127.0.0.1
    - export REALWORLD_TEST_DB_PORT=3306
    - export REALWORLD_TEST_DB_NAME=RealworldTest
    - export REALWORLD_TEST_DB_USER=admin
    - export REALWORLD_TEST_DB_PASSWORD=123456
    - cd bin
    - ./Realworld-test

#code_quality:
#  image: ubuntu:22.04
#  stage: test
#  before_script:
#    - apt update -qy
#    - apt upgrade -qy
#    - apt -qy install cppcheck
#  script:
#    - cppcheck --xml --enable=all ./src/ 2> cppcheck_out.xml
#  artifacts:
#    paths:
#      - cppcheck_out.xml

release-docker:
  image: docker:23.0.5-git
  stage: release
  services:
    - docker:23.0.5-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_TEST_IMAGE
    - docker logout $CI_REGISTRY
    - docker login -u $EXT_USER -p $EXT_PAT $EXT_REGISTRY
    - docker tag $CONTAINER_TEST_IMAGE $EXT_USER/$CONTAINER_RELEASE_IMAGE
    - docker push $EXT_USER/$CONTAINER_RELEASE_IMAGE

#deploy:
#  stage: deploy
#  script: echo "Define your deployment script!"
#  environment: production
